let restaurants,neighborhoods,cuisines;var map;var markers=[];if(navigator.serviceWorker){window.addEventListener('load',()=>{openDB();navigator.serviceWorker.register('/sw.js').then((registration)=>{console.log('ServiceWorker registration successful with scope: ',registration.scope)},(err)=>{console.log('ServiceWorker registration failed: ',err)})})}
openDB=()=>{if(!window.indexedDB){window.alert("Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.")}
let request=window.indexedDB.open('restaurant-review-db',1);request.onupgradeneeded=function(event){var db=event.target.result;var keyValStore=db.createObjectStore('keyval');console.log('created object store in openDB')};request.onerror=function(event){console.log('failed to open indexedDB openDB')}};document.addEventListener('DOMContentLoaded',(event)=>{openDB();fetchNeighborhoods();fetchCuisines()});fetchNeighborhoods=()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{if(error){console.error(error)}else{self.neighborhoods=neighborhoods;fillNeighborhoodsHTML()}})};fillNeighborhoodsHTML=(neighborhoods=self.neighborhoods)=>{const select=document.getElementById('neighborhoods-select');neighborhoods.forEach((neighborhood)=>{const option=document.createElement('option');option.innerHTML=neighborhood;option.value=neighborhood;select.append(option)})};fetchCuisines=()=>{DBHelper.fetchCuisines((error,cuisines)=>{if(error){console.error(error)}else{self.cuisines=cuisines;fillCuisinesHTML()}})};fillCuisinesHTML=(cuisines=self.cuisines)=>{const select=document.getElementById('cuisines-select');cuisines.forEach((cuisine)=>{const option=document.createElement('option');option.innerHTML=cuisine;option.value=cuisine;select.append(option)})};window.initMap=()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById('map'),{zoom:12,center:loc,scrollwheel:!1});updateRestaurants()};updateRestaurants=()=>{const cSelect=document.getElementById('cuisines-select');const nSelect=document.getElementById('neighborhoods-select');const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{if(error){console.error(error)}else{resetRestaurants(restaurants);fillRestaurantsHTML()}})};resetRestaurants=(restaurants)=>{self.restaurants=[];const ul=document.getElementById('restaurants-list');ul.innerHTML='';self.markers.forEach((m)=>m.setMap(null));self.markers=[];self.restaurants=restaurants};fillRestaurantsHTML=(restaurants=self.restaurants)=>{const ul=document.getElementById('restaurants-list');restaurants.forEach((restaurant)=>{ul.append(createRestaurantHTML(restaurant))});addMarkersToMap()};createRestaurantHTML=(restaurant)=>{const li=document.createElement('li');const image=document.createElement('img');image.className='restaurant-img';image.src=DBHelper.imageUrlForRestaurant(restaurant);image.alt=restaurant.name;li.append(image);const name=document.createElement('h2');name.innerHTML=restaurant.name;li.append(name);const neighborhood=document.createElement('p');neighborhood.innerHTML=restaurant.neighborhood;li.append(neighborhood);const address=document.createElement('p');address.innerHTML=restaurant.address;li.append(address);const more=document.createElement('a');more.innerHTML='View Details';more.href=DBHelper.urlForRestaurant(restaurant);li.append(more);return li};addMarkersToMap=(restaurants=self.restaurants)=>{restaurants.forEach((restaurant)=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,'click',()=>{window.location.href=marker.url});self.markers.push(marker)})}